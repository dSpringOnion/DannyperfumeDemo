// Ecommerce Boilerplate - Database Schema
// Based on: .agent/system/SYSTEM_DESIGN.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION & USERS (Auth.js v5)
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Hashed password (for email/password auth)
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth.js relations
  accounts Account[]
  sessions Session[]

  // Ecommerce relations
  cart     CartItem[]
  orders   Order[]
  reviews  Review[]
  wishlist WishlistItem[]
  addresses Address[]

  @@index([email])
  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// PRODUCTS & CATALOG
// ============================================

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  products Product[]

  @@index([slug])
  @@index([parentId])
  @@map("categories")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?  @db.Text
  price           Decimal  @db.Decimal(10, 2)
  compareAtPrice  Decimal? @db.Decimal(10, 2)
  costPerItem     Decimal? @db.Decimal(10, 2)
  sku             String?  @unique
  barcode         String?
  inventory       Int      @default(0)
  trackInventory  Boolean  @default(true)
  images          String[]
  metaTitle       String?
  metaDescription String?
  isActive        Boolean  @default(true)
  isFeatured      Boolean  @default(false)
  categoryId      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  category      Category?        @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
  tags          ProductTag[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@index([slug])
  @@index([categoryId])
  @@index([isActive])
  @@index([isFeatured])
  @@map("products")
}

model ProductVariant {
  id             String   @id @default(cuid())
  productId      String
  name           String
  sku            String?  @unique
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)
  inventory      Int      @default(0)
  images         String[]
  options        Json     // { "size": "M", "color": "Blue" }
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@index([productId])
  @@index([sku])
  @@map("product_variants")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  products ProductTag[]

  @@index([slug])
  @@map("tags")
}

model ProductTag {
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
  @@index([productId])
  @@index([tagId])
  @@map("product_tags")
}

// ============================================
// CART & WISHLIST
// ============================================

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  variantId String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@index([userId])
  @@index([productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("wishlist_items")
}

// ============================================
// ORDERS & PAYMENTS
// ============================================

model Order {
  id                String            @id @default(cuid())
  orderNumber       String            @unique
  userId            String?
  email             String
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)

  // Amounts
  subtotal Decimal @db.Decimal(10, 2)
  tax      Decimal @db.Decimal(10, 2)
  shipping Decimal @db.Decimal(10, 2)
  discount Decimal @default(0) @db.Decimal(10, 2)
  total    Decimal @db.Decimal(10, 2)

  // Stripe
  stripePaymentIntentId String? @unique
  stripeCustomerId      String?

  // Addresses
  shippingAddressId String?
  billingAddressId  String?

  // Metadata
  customerNote String? @db.Text
  internalNote String? @db.Text
  ipAddress    String?
  userAgent    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User?    @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddress Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])

  @@index([userId])
  @@index([orderNumber])
  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
}

model OrderItem {
  id              String   @id @default(cuid())
  orderId         String
  productId       String
  variantId       String?
  quantity        Int
  price           Decimal  @db.Decimal(10, 2)
  total           Decimal  @db.Decimal(10, 2)
  productSnapshot Json     // Store product details at time of purchase
  createdAt       DateTime @default(now())

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String?
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@index([userId])
  @@map("addresses")
}

// ============================================
// REVIEWS & RATINGS
// ============================================

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int      // 1-5
  title      String?
  comment    String?  @db.Text
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@map("reviews")
}
